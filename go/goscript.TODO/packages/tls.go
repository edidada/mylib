package imports

import (
	"crypto/tls"
	"reflect"

	"git.woa.com/vasd_masc_ba/YitihuaOteam/base/gofun/register"
)

var _ = reflect.Int

func init() {
	register.AddPackage("crypto/tls", "tls",
		register.NewType("Certificate", reflect.TypeOf(func(tls.Certificate) {}).In(0), ""),
		register.NewType("CertificateRequestInfo", reflect.TypeOf(func(tls.CertificateRequestInfo) {}).In(0), ""),
		register.NewType("CipherSuite", reflect.TypeOf(func(tls.CipherSuite) {}).In(0), ""),
		register.NewFunction("CipherSuiteName", tls.CipherSuiteName, ""),
		register.NewFunction("CipherSuites", tls.CipherSuites, ""),
		register.NewFunction("Client", tls.Client, ""),
		register.NewType("ClientAuthType", reflect.TypeOf(func(tls.ClientAuthType) {}).In(0), ""),
		register.NewType("ClientHelloInfo", reflect.TypeOf(func(tls.ClientHelloInfo) {}).In(0), ""),
		register.NewType("ClientSessionCache", reflect.TypeOf(func(tls.ClientSessionCache) {}).In(0), ""),
		register.NewType("ClientSessionState", reflect.TypeOf(func(tls.ClientSessionState) {}).In(0), ""),
		register.NewType("Config", reflect.TypeOf(func(tls.Config) {}).In(0), ""),
		register.NewType("Conn", reflect.TypeOf(func(tls.Conn) {}).In(0), ""),
		register.NewType("ConnectionState", reflect.TypeOf(func(tls.ConnectionState) {}).In(0), ""),
		register.NewType("CurveID", reflect.TypeOf(func(tls.CurveID) {}).In(0), ""),
		register.NewConst("CurveP256", tls.CurveP256, ""),
		register.NewConst("CurveP384", tls.CurveP384, ""),
		register.NewConst("CurveP521", tls.CurveP521, ""),
		register.NewFunction("Dial", tls.Dial, ""),
		register.NewFunction("DialWithDialer", tls.DialWithDialer, ""),
		register.NewConst("ECDSAWithP256AndSHA256", tls.ECDSAWithP256AndSHA256, ""),
		register.NewConst("ECDSAWithP384AndSHA384", tls.ECDSAWithP384AndSHA384, ""),
		register.NewConst("ECDSAWithP521AndSHA512", tls.ECDSAWithP521AndSHA512, ""),
		register.NewConst("ECDSAWithSHA1", tls.ECDSAWithSHA1, ""),
		register.NewConst("Ed25519", tls.Ed25519, ""),
		register.NewFunction("InsecureCipherSuites", tls.InsecureCipherSuites, ""),
		register.NewFunction("Listen", tls.Listen, ""),
		register.NewFunction("LoadX509KeyPair", tls.LoadX509KeyPair, ""),
		register.NewFunction("NewLRUClientSessionCache", tls.NewLRUClientSessionCache, ""),
		register.NewFunction("NewListener", tls.NewListener, ""),
		register.NewConst("NoClientCert", tls.NoClientCert, ""),
		register.NewConst("PKCS1WithSHA1", tls.PKCS1WithSHA1, ""),
		register.NewConst("PKCS1WithSHA256", tls.PKCS1WithSHA256, ""),
		register.NewConst("PKCS1WithSHA384", tls.PKCS1WithSHA384, ""),
		register.NewConst("PKCS1WithSHA512", tls.PKCS1WithSHA512, ""),
		register.NewConst("PSSWithSHA256", tls.PSSWithSHA256, ""),
		register.NewConst("PSSWithSHA384", tls.PSSWithSHA384, ""),
		register.NewConst("PSSWithSHA512", tls.PSSWithSHA512, ""),
		register.NewType("RecordHeaderError", reflect.TypeOf(func(tls.RecordHeaderError) {}).In(0), ""),
		register.NewConst("RenegotiateFreelyAsClient", tls.RenegotiateFreelyAsClient, ""),
		register.NewConst("RenegotiateNever", tls.RenegotiateNever, ""),
		register.NewConst("RenegotiateOnceAsClient", tls.RenegotiateOnceAsClient, ""),
		register.NewType("RenegotiationSupport", reflect.TypeOf(func(tls.RenegotiationSupport) {}).In(0), ""),
		register.NewConst("RequestClientCert", tls.RequestClientCert, ""),
		register.NewConst("RequireAndVerifyClientCert", tls.RequireAndVerifyClientCert, ""),
		register.NewConst("RequireAnyClientCert", tls.RequireAnyClientCert, ""),
		register.NewFunction("Server", tls.Server, ""),
		register.NewType("SignatureScheme", reflect.TypeOf(func(tls.SignatureScheme) {}).In(0), ""),
		register.NewConst("TLS_AES_128_GCM_SHA256", tls.TLS_AES_128_GCM_SHA256, ""),
		register.NewConst("TLS_AES_256_GCM_SHA384", tls.TLS_AES_256_GCM_SHA384, ""),
		register.NewConst("TLS_CHACHA20_POLY1305_SHA256", tls.TLS_CHACHA20_POLY1305_SHA256, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305", tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, ""),
		register.NewConst("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305", tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, ""),
		register.NewConst("TLS_ECDHE_RSA_WITH_RC4_128_SHA", tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA, ""),
		register.NewConst("TLS_FALLBACK_SCSV", tls.TLS_FALLBACK_SCSV, ""),
		register.NewConst("TLS_RSA_WITH_3DES_EDE_CBC_SHA", tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA, ""),
		register.NewConst("TLS_RSA_WITH_AES_128_CBC_SHA", tls.TLS_RSA_WITH_AES_128_CBC_SHA, ""),
		register.NewConst("TLS_RSA_WITH_AES_128_CBC_SHA256", tls.TLS_RSA_WITH_AES_128_CBC_SHA256, ""),
		register.NewConst("TLS_RSA_WITH_AES_128_GCM_SHA256", tls.TLS_RSA_WITH_AES_128_GCM_SHA256, ""),
		register.NewConst("TLS_RSA_WITH_AES_256_CBC_SHA", tls.TLS_RSA_WITH_AES_256_CBC_SHA, ""),
		register.NewConst("TLS_RSA_WITH_AES_256_GCM_SHA384", tls.TLS_RSA_WITH_AES_256_GCM_SHA384, ""),
		register.NewConst("TLS_RSA_WITH_RC4_128_SHA", tls.TLS_RSA_WITH_RC4_128_SHA, ""),
		register.NewConst("VerifyClientCertIfGiven", tls.VerifyClientCertIfGiven, ""),
		register.NewConst("VersionSSL30", tls.VersionSSL30, ""),
		register.NewConst("VersionTLS10", tls.VersionTLS10, ""),
		register.NewConst("VersionTLS11", tls.VersionTLS11, ""),
		register.NewConst("VersionTLS12", tls.VersionTLS12, ""),
		register.NewConst("VersionTLS13", tls.VersionTLS13, ""),
		register.NewConst("X25519", tls.X25519, ""),
		register.NewFunction("X509KeyPair", tls.X509KeyPair, ""),
	)
}
